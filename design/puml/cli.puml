@startuml deployment_graph
    skinparam {
        FontName "Courier New"
    }

    title CLI Deployment Graph
    database "registry.npmjs.org" as npmRegister
    node "Host node" as hostNode #e8eaf6 {
        component "NPM Client" as npmClient [[https://www.npmjs.com/get-npm]] #c9ffc7
        interface "bin" as npmBinAPI [[https://docs.npmjs.com/files/package.json#bin]] #c9ffc7
        folder "NPM Global Packages" as npmGlobalPackages #f6ffc7 {
            package "@imazzine/cli" as cliPackage  #ffffff {
                artifact "package.json" as packageJson [[./cliPackageJson.svg]] #c9ffc7
                artifact ".env" as dotenvGlobal #81d4fa
                artifact "cli.js" as cliJs #c9ffc7
            }
        }
        folder "Root Project Folder" as projectScope #ffffff {
            artifact ".env" as dotenvProject #81d4fa
        }
        node "Node.js Process" as nodeJs #b3e5fc {
            component "cli app" as cli [[./cli_app.svg]] #c9ffc7
            database "process.env" as env #81d4fa
            cli -> env: use
        }
        interface "zz" as zzInterface #c9ffc7
        component "Command-Line Interpreter" as commandLineTool [[https://en.wikipedia.org/wiki/List_of_command-line_interpreters]] #e0e0e0
        npmRegister *-- cliPackage
        npmClient -- npmBinAPI
        cliPackage -- zzInterface
        npmBinAPI )- zzInterface
        zzInterface )- commandLineTool
        nodeJs <-- npmClient: run
        cliJs <-- nodeJs: execute
        cliJs --> cli: instantiate
        cli --> dotenvProject: use as a\nproject\nstorage
        dotenvGlobal <-- cli: use as a\nglobal\nstorage
        note as zzCliList
            zz help
            zz version
            zz add <subject> <path>
            zz remove <subject> <path>
        end note
        zzInterface .. zzCliList
    }
@enduml

@startjson cliPackageJson
{
  "name": "@imazzine/cli",
  "version": "0.0.0-alpha.0",
  "license": "Apache-2.0",
  "author": {
    "name": "Artem Lytvynov",
    "email": "buntarb@gmail.com"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org/",
    "access": "public"
  },
  "engines": {
    "node": ">=14.0.0"
  },
  "type": "module",
  "preferGlobal": true,
  "devDependencies": {
    "jest": "^26.6.3",
    "coveralls": "^3.1.0"
  },
  "dependencies": {
    "commander": "^6.2.0",
    "dotenv": "^8.2.0",
    "uuid": "^8.3.2",
    "resolve-global": "^1.0.0"
  },
  "scripts": {
    "test": "node --experimental-vm-modules node_modules/.bin/jest",
    "test:lcov": "node --experimental-vm-modules node_modules/.bin/jest --coverage"
  },
  "bin": {
    "zz": "./cli.js"
  }
}
@endjson

@startuml cli_app
    title CLI Application
    node "Node.js Runtime" as NodeJS {
        component "commander" as CommanderComponent [[https://www.npmjs.com/package/commander]]
        interface "process" as process [[https://nodejs.org/dist/latest-v10.x/docs/api/process.html]] #ffc7fd
    }
@enduml

@startuml IDKExecutor
    title IDK Executor

|main|
    start
        :const process;/
        :process.env.idk = process.env.idk || {};]
        if (!process.env.idk) then (yes)
            :process.env.idk =
            getIdk('./package.json');]
|getIdk|
            :path/
            :const package = readJson(path);]
            :package['idk'].version = package.version;]
            :return package['idk'];/
|main|
        endif
        if (!process.env.idk.current) then (yes)
            :process.env.idk.current =
            getCurrent(process.cwd());|
|getCurrent|
            :path/
            repeat
                :const pjson = path.resolve(path, './package.json');]
                if (exist(pjson)) then (yes)
                    :const package = readJson(pjson);]
                    if (package.idk &&
process.env.idk.version ===
package.idk.version) then (yes)
                        :const current = {};]
                        :current.path = path;]
                        :current.config = package.idk.config;]
                        :const projects = process.env.idk.projects]
                        while (let i = 0; i < projects.length; i++)
                            if (projects[i].path === current.path) then (yes)
                                :current.config = _.union(
                                    current.config,
                                    projects[i].config
                                );]
                            endif
                        endwhile
                        :return current;/
                        (A)
                        detach
                    endif
                endif
                :const prev = path;]
                :path = path.resolve(path, './..'); ]
            repeat while (path !== prev) is (yes)
            ->no;
            :return false;/
            (A)
            detach
|main|
        endif
        (A)
        :const commands = process.env.idk.commands]
        while (let i = 0; i < commands.length; i++)
            :require
                .ensure(commands[i].path)
                .then((command)=>{
                    command.execute(process.argv)
                });|
        endwhile
    end
@enduml